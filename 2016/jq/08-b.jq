#!/bin/sh
# \
exec jq -n -rR -f "$0" "$@"

# Screen Dimensions
[50, 6] as [$w, $h] |

# Utility
def group_of($n):
  . as $in | [ range(0;length;$n) | $in[.:(.+$n)] ]
;

reduce (
  inputs | [
    scan("(rect|col|row)")[],
  ( scan("\\d+") | tonumber )
  ]
) as $op ([range($w * $h) | false];
  if $op[0] == "rect" then
    .[ range($op[1]) as $x | range($op[2]) as $y | $x + $y * $w ] = true
  elif $op[0] == "row" then
    $op[1:] as [ $y , $s ] |
    .[$y*$w:$y*$w+$w] = .[$y*$w+$w-$s:$y*$w+$w] + .[$y*$w:$y*$w+$w-$s]
  else
    $op[1:] as [ $x , $s ] |
    reduce (. as $d | range($h) as $y | [$y , $d[$x + $y * $w ]]) as [$y,$v] (.;
      .[$x + ( ( $y + $s ) % $h) * $w] = $v
    )
  end
) |

# Make display to letter map
(
  [
    # Font map - Some values are assumed
    # A      B        C        D        E
    ".##..", "###..", ".##..", "###..", "####.",
    "#..#.", "#..#.", "#..#.", "#..#.", "#....",
    "#..#.", "###..", "#....", "#..#.", "###..",
    "####.", "#..#.", "#....", "#..#.", "#....",
    "#..#.", "#..#.", "#..#.", "#..#.", "#....",
    "#..#.", "###..", ".##..", "###..", "####.",
    # F      G        H        I        J
    "####.", ".##..", "#..#.", ".###.", "..##.",
    "#....", "#..#.", "#..#.", "..#..", "...#.",
    "###..", "#....", "####.", "..#..", "...#.",
    "#....", "#.##.", "#..#.", "..#..", "...#.",
    "#....", "#..#.", "#..#.", "..#..", "#..#.",
    "#....", ".###.", "#..#.", ".###.", ".##..",
    # K       L        M       N
    "#..#.", "#....", ".#.#.", "#...#", ".##..",
    "#.#..", "#....", "#####", "##..#", "#..#.",
    "##...", "#....", "#.#.#", "#.#.#", "#..#.",
    "#.#..", "#....", "#.#.#", "#.#.#", "#..#.",
    "#.#..", "#....", "#...#", "#..##", "#..#.",
    "#..#.", "####.", "#...#", "#...#", ".##..",
    # P      Q        R        S        T
    "###..", ".##..", "###..", ".###.", "#####",
    "#..#.", "#..#.", "#..#.", "#....", "..#..",
    "#..#.", "#..#.", "#..#.", "#....", "..#..",
    "###..", "#.##.", "###..", ".##..", "..#..",
    "#....", "#..#.", "#.#..", "...#.", "..#..",
    "#....", ".##.#", "#..#.", "###..", "..#..",
    # U      V        W        X        Y
    "#..#.", "#...#", "#...#", "#...#", "#...#",
    "#..#.", "#...#", "#...#", ".#.#.", "#...#",
    "#..#.", "#...#", "#.#.#", "..#..", ".#.#.",
    "#..#.", ".#.#.", "#.#.#", ".#.#.", "..#..",
    "#..#.", ".#.#.", "#####", "#...#", "..#..",
    ".##..", "..#..", ".#.#.", "#...#", "..#.."
  ] | [
    (
      # Reshape input into proper keys
      [ group_of(5) | transpose[] | group_of(6)[] | add ] |
      [ group_of(5) | transpose[][] ]
    ),
    ( "ABCDEFGHIJKLMNOPQRSTUVWXY" / "")
  ] | transpose | map({(.[0]):.[1]}) | add

  # Add missing Z
  | .[
    [
      "####.",
      "...#.",
      "..#..",
      ".#...",
      "#....",
      "####."
    ] | add
  ] = "Z"
) as $to_letter |

# Reshape screen into letter blocks
map(if . then "#" else "." end) | group_of(5) | group_of($w / 5) | [ transpose[] | map(add|debug) |
  ("-----" | debug) as $d |
  # Letter block -> letter
  $to_letter[add] // "_"
]

# Output text on display
| add
